import streamlit as st
import pandas as pd
import random
import time

merge_set = pd.read_csv('./merge_set.csv')

def difficulty(set):
    dif = st.selectbox('Choose the difficulty:', ['easy', 'medium', 'hard'])
    if dif == 'hard':
        set = set[(set['start_year'] <= 1966) & (~set['region'].isin(['US', 'CA']))]
        st.write('Rules: +1 if correct, -1 if incorrect.')
    elif dif == 'medium':
        set = set[(set['start_year'] >= 1967) & (set['start_year'] <= 1987) & (set['region'].isin(['US', 'CA']))]
        st.write('Rules: +1 if correct, -0.5 if incorrect.')
    elif dif == 'easy':
        set = set[(set['start_year'] >= 1988) & 
                  (set['region'].isin(['US', 'CA'])) & 
                  (set['first_profession'].isin(['actor', 'actress', 'writer', 'producer', 'director'])) &
                  (~set['genre_1'].isin(['Documentary', 'Talk-Show', 'Game-Show', 'Sci-Fi', 'News', 'History', 'Reality-TV', 'Short', 'Adult']))]
        st.write('Rules: +1 if correct, 0 otherwise.')
    return set, dif

def rounds():
    num_rounds = st.number_input('How many rounds do you want to play?', min_value=1, value=1)
    return num_rounds

def first_question(set):
    indices = random.choice(set.index) 
    title = set['title'].iloc[indices]
    region = set['region'].iloc[indices]
    name_surname = set['name_surname'].iloc[indices]
    role = set['first_profession'].iloc[indices]
    correct_answer = set['start_year'].iloc[indices]
    question = f"In which year was '{title}' made in {region} with {name_surname} as a {role}?"
    return question, correct_answer    

def second_question(set):
    indices = random.choice(set.index) 
    title = set['title'].iloc[indices]
    region = set['region'].iloc[indices]
    name_surname = set['name_surname'].iloc[indices]
    role = set['first_profession'].iloc[indices]
    correct_answer = set['genre_1'].iloc[indices]
    question = f"What genre is '{title}' made in {region} with {name_surname} as a {role}?"
    return question, correct_answer    

def third_question(set):
    indices = random.choice(set.index) 
    movie_type = set['type'].iloc[indices]
    name_surname = set['name_surname'].iloc[indices]
    role = set['first_profession'].iloc[indices]
    region = set['region'].iloc[indices]
    correct_answer = set['title'].iloc[indices]
    question = f"What was the title of the {movie_type} made in {region} with {name_surname} as a {role}?"
    return question, correct_answer    

def fourth_question(set):
    indices = random.choice(set.index) 
    movie_type = set['type'].iloc[indices]
    title = set['title'].iloc[indices]
    role = set['first_profession'].iloc[indices]
    correct_answer = set['name_surname'].iloc[indices]
    question = f"Who was the {role} of the {movie_type} named '{title}'?"
    return question, correct_answer    

def score_fun(score, my_answer, correct_answer, dif):
    if my_answer == correct_answer:
        score += 1
        st.write(f'Your answer was {my_answer} and the correct one is {correct_answer}.')
    else:
        st.write(f'Your answer was {my_answer} but the correct one is {correct_answer}.')
        if dif == 'hard':
            score -= 1
        elif dif == 'medium':
            score -= 0.5
        score = max(0, score)
    st.write(f'Your current score is: {score}')
    return score

def gen_answers(correct_answer):
    if correct_answer in merge_set['start_year'].values:
        incorrect_ans = [correct_answer - random.choice([2, 4, 6, 8]), 
                         correct_answer - random.choice([1, 3, 5, 7, 9]), 
                         correct_answer - random.choice([10, 15, 20, 25, 30])]
        options = [correct_answer] + incorrect_ans
        random.shuffle(options)
        return options
    elif correct_answer in merge_set['genre_1'].values:
        incorrect_ans = random.sample(list(merge_set['genre_1'].unique()), 3)
        if correct_answer in incorrect_ans:
            while correct_answer in incorrect_ans:
                incorrect_ans = random.sample(list(merge_set['genre_1'].unique()), 3)
        options = [correct_answer] + incorrect_ans
        random.shuffle(options)
        return options
    elif correct_answer in merge_set['title'].values:
        incorrect_ans = random.sample(list(merge_set['title'].unique()), 3)
        if correct_answer in incorrect_ans:
            while correct_answer in incorrect_ans:
                incorrect_ans = random.sample(list(merge_set['title'].unique()), 3)
        options = [correct_answer] + incorrect_ans
        random.shuffle(options)
        return options
    elif correct_answer in merge_set['name_surname'].values:
        incorrect_ans = random.sample(list(merge_set['name_surname'].unique()), 3)
        if correct_answer in incorrect_ans:
            while correct_answer in incorrect_ans:
                incorrect_ans = random.sample(list(merge_set['name_surname'].unique()), 3)
        options = [correct_answer] + incorrect_ans
        random.shuffle(options)
        return options

def ask_question(question, correct_answer, choices):
    st.write(question)
    letters = ['A', 'B', 'C', 'D']
    for j, choice in zip(letters, choices):
        st.write(f"{j}. {choice}")

    my_answer = st.selectbox('Enter your answer (A, B, C, or D):', letters)
    chosen_index = letters.index(my_answer)
    chosen_answer = choices[chosen_index]

    return chosen_answer, correct_answer  

def quiz(set):
    st.write('Welcome! Please choose the difficulty and the number of rounds.')
    score = 0

    set, dif = difficulty(set)
    num_rounds = rounds()
    st.write(f'You are going to play {num_rounds} rounds at {dif} level.')
    
    start_time = time.time()
    question_funcs = [first_question, second_question, third_question, fourth_question]

    for round_number in range(num_rounds):
        st.write('-------------------------------------------')
        st.write(f'Round {round_number + 1}')
        
        question_func = question_funcs[round_number % len(question_funcs)]
        question, correct_answer = question_func(set)
        choices = gen_answers(correct_answer)
        chosen_answer, correct_answer = ask_question(question, correct_answer, choices)
        score = score_fun(score, chosen_answer, correct_answer, dif)

    end_time = time.time()
    time_involved = end_time - start_time
    st.write('-------------------------------------------')
    st.write(f"It took you {time_involved:.2f} seconds to complete the quiz.")

    if score / num_rounds > 0.6:
        st.write(f'Good job! Your final score is {score}/{num_rounds}.')
    else:
        st.write(f'You can do better! Your final score is {score}/{num_rounds}.')

if __name__ == "__main__":
    quiz(merge_set)